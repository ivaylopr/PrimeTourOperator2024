// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrimeTourOperator.Infrastructure.Data;

#nullable disable

namespace PrimeTourOperator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240315084223_FixingDeadLineForVacation")]
    partial class FixingDeadLineForVacation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "169c21f6-c075-448c-9e86-d77c5a903a97",
                            Email = "agent@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "agent@mail.com",
                            NormalizedUserName = "agent@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAhJ1yZuzSm7dI65bdV2M3DkxN1MiOhpX1rMhIwimF0rSJBjqRcTokqY6ufnck/WIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81204565-e0b4-4df2-9f86-5f230c891f98",
                            TwoFactorEnabled = false,
                            UserName = "agent@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009c025b-05ed-41e7-bedd-15106b22946e",
                            Email = "guest@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@mail.com",
                            NormalizedUserName = "guest@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFH7I7x2Qh1xSK1YjOTKc+C951oaPPB6wFf2ppJmrH41rBrqNogNjxQMLJA1rbuTbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3275e351-e2d6-49e7-8be5-cf676af81ab9",
                            TwoFactorEnabled = false,
                            UserName = "guest@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Agent identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Agent phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User who is agent identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Agents");

                    b.HasComment("Agent class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PhoneNumber = "+359888888888",
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Companion")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("SeasonalEmploymentId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonalEmploymentId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Hotel identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("AllInclusivePrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("All inclusive additional price to the room offer");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CategoryStars")
                        .HasColumnType("int");

                    b.Property<bool>("ChildrenAnimators")
                        .HasColumnType("bit")
                        .HasComment("Children animation available");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Hotel location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Hotel name");

                    b.Property<bool>("Pool")
                        .HasColumnType("bit")
                        .HasComment("Pool available");

                    b.Property<bool>("Spa")
                        .HasColumnType("bit")
                        .HasComment("Spa available");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasComment("Hotel class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllInclusivePrice = 100m,
                            Capacity = 200,
                            CategoryStars = 3,
                            ChildrenAnimators = true,
                            Location = "Sozopol, Bulgaria",
                            Name = "Black Sea Star",
                            Pool = true,
                            Spa = true
                        },
                        new
                        {
                            Id = 2,
                            AllInclusivePrice = 200m,
                            Capacity = 300,
                            CategoryStars = 4,
                            ChildrenAnimators = true,
                            Location = "Bansko, Bulgaria",
                            Name = "Bansko Resort",
                            Pool = true,
                            Spa = true
                        },
                        new
                        {
                            Id = 3,
                            AllInclusivePrice = 150m,
                            Capacity = 400,
                            CategoryStars = 5,
                            ChildrenAnimators = true,
                            Location = "Kos iceland, Greece",
                            Name = "Porto Bello",
                            Pool = true,
                            Spa = true
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.HotelVacation", b =>
                {
                    b.Property<int>("VacationId")
                        .HasColumnType("int");

                    b.Property<int>("HodelId")
                        .HasColumnType("int");

                    b.HasKey("VacationId", "HodelId");

                    b.HasIndex("HodelId");

                    b.ToTable("HotelVacations");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalExtras")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Additional room extras");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Room price");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int")
                        .HasComment("Room category and description about it");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Room title");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("Rooms");

                    b.HasComment("Room class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 10,
                            Price = 70.00m,
                            RoomCategoryId = 1,
                            Title = "Two person room"
                        },
                        new
                        {
                            Id = 2,
                            Count = 5,
                            Price = 90.00m,
                            RoomCategoryId = 2,
                            Title = "Studio room"
                        },
                        new
                        {
                            Id = 3,
                            Count = 1,
                            Price = 300.00m,
                            RoomCategoryId = 3,
                            Title = "President apartment"
                        },
                        new
                        {
                            Id = 4,
                            Count = 30,
                            Price = 100.00m,
                            RoomCategoryId = 1,
                            Title = "Bansko Resort two bed room"
                        },
                        new
                        {
                            Id = 5,
                            Count = 10,
                            Price = 150.00m,
                            RoomCategoryId = 2,
                            Title = "Bansko Resort studio"
                        },
                        new
                        {
                            Id = 6,
                            Count = 2,
                            Price = 800.00m,
                            RoomCategoryId = 3,
                            Title = "Bansko Resort president apartment"
                        },
                        new
                        {
                            Id = 7,
                            Count = 35,
                            Price = 120m,
                            RoomCategoryId = 1,
                            Title = "Porto Bello two bed room"
                        },
                        new
                        {
                            Id = 8,
                            Count = 15,
                            Price = 180m,
                            RoomCategoryId = 2,
                            Title = "Porto bello studio"
                        },
                        new
                        {
                            Id = 9,
                            Count = 1,
                            Price = 500.00m,
                            RoomCategoryId = 3,
                            Title = "Porto Bello president apartment"
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.RoomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoomCategory");

                    b.HasComment("Room category type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Room appropriate for two person, included: bathroom, balcony, refrigerator, air conditioning, room service.",
                            Name = "Two bed room"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Room appropriate for family, included: bathroom, balcony, refrigerator, air conditioning, room service, two single beds, kitchen.",
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Room appropriate for people who loves the lux. All extras and services of the hotel is available.",
                            Name = "President apartment"
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.SeasonalEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent responsible for the offer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Job description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("End date for the job");

                    b.Property<int>("HotelId")
                        .HasColumnType("int")
                        .HasComment("Hotel who is offering the season job");

                    b.Property<decimal>("HourlyWage")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Payment per hour");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Data for starting job");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Job title");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("HotelId");

                    b.ToTable("SeasonalEmployments");

                    b.HasComment("Season job class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgentId = 1,
                            Description = "Person who help to the shefs and performs the given tasks",
                            EndDate = new DateTime(2024, 9, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            HourlyWage = 5.5m,
                            StartDate = new DateTime(2024, 3, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Kitchen helper"
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 1,
                            Description = "Cleaning rooms and common areas and preparing the hotel for the customers",
                            EndDate = new DateTime(2024, 9, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            HourlyWage = 5.5m,
                            StartDate = new DateTime(2024, 3, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "House keeper"
                        },
                        new
                        {
                            Id = 3,
                            AgentId = 1,
                            Description = "Delivering and service to the hotel customers' room",
                            EndDate = new DateTime(2024, 10, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            HourlyWage = 6.5m,
                            StartDate = new DateTime(2024, 3, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Room service"
                        },
                        new
                        {
                            Id = 4,
                            AgentId = 1,
                            Description = "Working to the reception, assistance to the customers problems and questions",
                            EndDate = new DateTime(2025, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            HourlyWage = 7.5m,
                            StartDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Receptionist"
                        },
                        new
                        {
                            Id = 5,
                            AgentId = 1,
                            Description = "Welcoming and full assistance with customers' luggage",
                            EndDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            HourlyWage = 3.5m,
                            StartDate = new DateTime(2024, 3, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Piccolo"
                        },
                        new
                        {
                            Id = 6,
                            AgentId = 1,
                            Description = "Welcoming and parking the cusstomers cars on the hotel parking",
                            EndDate = new DateTime(2024, 4, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            HourlyWage = 3.5m,
                            StartDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Parking assistance"
                        },
                        new
                        {
                            Id = 7,
                            AgentId = 1,
                            Description = "Lifeguard on the hotel pool",
                            EndDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            HourlyWage = 8.00m,
                            StartDate = new DateTime(2024, 3, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Lifeguard"
                        },
                        new
                        {
                            Id = 8,
                            AgentId = 1,
                            Description = "Waiter at the hotel restorant",
                            EndDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            HourlyWage = 3.00m,
                            StartDate = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Waiter"
                        },
                        new
                        {
                            Id = 9,
                            AgentId = 1,
                            Description = "Bartendering and enterteiment",
                            EndDate = new DateTime(2024, 10, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            HourlyWage = 6.00m,
                            StartDate = new DateTime(2024, 2, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Barman"
                        },
                        new
                        {
                            Id = 10,
                            AgentId = 1,
                            Description = "Washing the dishes in the kitchen",
                            EndDate = new DateTime(2024, 10, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            HourlyWage = 4.50m,
                            StartDate = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dishwasher"
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Vacation identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int")
                        .HasComment("Agent who is responsive for the vacation");

                    b.Property<bool?>("AllInclusive")
                        .HasColumnType("bit")
                        .HasComment("Is all inclusive option added to the vacation");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Vacation description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vacation end date/leaving");

                    b.Property<DateTime?>("EnrollmentDeadline")
                        .HasColumnType("datetime2")
                        .HasComment("Vacation enrollment deadline");

                    b.Property<int>("HotelId")
                        .HasColumnType("int")
                        .HasComment("Hotel identifier of the holiday");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Location of the vacation");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int")
                        .HasComment("Room for the vacation");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vacation start date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Vacation Title");

                    b.Property<int>("VacationCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.HasIndex("VacationCategoryId");

                    b.ToTable("Vacations");

                    b.HasComment("Vacation class");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgentId = 1,
                            AllInclusive = true,
                            Description = "Ten days all inclusive holiday next to Black sea in one of the oldest towns in Europe.Two bed room plus",
                            EndDate = new DateTime(2024, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentDeadline = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 1,
                            Location = "Sozopol, Bulgaria",
                            Price = 800.00m,
                            RoomId = 1,
                            StartDate = new DateTime(2024, 6, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Black Sea Star Sozopol-AllInclusive offer",
                            VacationCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgentId = 1,
                            AllInclusive = true,
                            Description = "Ten days all inclusive holiday next to Black sea in one of the oldest towns in Europe.Studio room plus",
                            EndDate = new DateTime(2024, 6, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentDeadline = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 2,
                            Location = "Sozopol, Bulgaria",
                            Price = 2000.00m,
                            RoomId = 2,
                            StartDate = new DateTime(2024, 6, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bansko Resort-AllInclusive offer",
                            VacationCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            AgentId = 1,
                            AllInclusive = true,
                            Description = "Ten days all inclusive holiday next to Agean sea in born place of Hipocrates.Studio room plus",
                            EndDate = new DateTime(2024, 7, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentDeadline = new DateTime(2024, 4, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = 3,
                            Location = "Sozopol, Bulgaria",
                            Price = 2000.00m,
                            RoomId = 3,
                            StartDate = new DateTime(2024, 7, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bansko Resort-AllInclusive offer",
                            VacationCategoryId = 1
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.VacationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Description of the type");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type of the vacation");

                    b.HasKey("Id");

                    b.ToTable("VacationCategories");

                    b.HasComment("Category class for vacations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Holiday next to the sea.",
                            VacationType = "Sea holiday"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Holiday in the mountain",
                            VacationType = "Mountain holiday"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Vacation in SPA resort",
                            VacationType = "Spa holiday"
                        });
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.VacationCustomer", b =>
                {
                    b.Property<int>("VacationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("VacationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("VacationCustomers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Agent", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.SeasonalEmployment", null)
                        .WithMany("Applayers")
                        .HasForeignKey("SeasonalEmploymentId");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.HotelVacation", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelVacations")
                        .HasForeignKey("HodelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Vacation", "Vacation")
                        .WithMany()
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Room", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Hotel", null)
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId");

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.RoomCategory", "RoomCategory")
                        .WithMany()
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.SeasonalEmployment", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Vacation", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.VacationCategory", "VacationCategory")
                        .WithMany("Vacations")
                        .HasForeignKey("VacationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("VacationCategory");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.VacationCustomer", b =>
                {
                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrimeTourOperator.Infrastructure.Data.Models.Vacation", "Vacation")
                        .WithMany("VacationCustomers")
                        .HasForeignKey("VacationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vacation");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Hotel", b =>
                {
                    b.Navigation("HotelVacations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.SeasonalEmployment", b =>
                {
                    b.Navigation("Applayers");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.Vacation", b =>
                {
                    b.Navigation("VacationCustomers");
                });

            modelBuilder.Entity("PrimeTourOperator.Infrastructure.Data.Models.VacationCategory", b =>
                {
                    b.Navigation("Vacations");
                });
#pragma warning restore 612, 618
        }
    }
}
